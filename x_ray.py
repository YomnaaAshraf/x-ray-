# -*- coding: utf-8 -*-
"""X_ray.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yn28RpfwaFCKZ44pvICjdCBcceLgrWO9
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

# !unzip /content/chest-xray-pneumonia.zip

import pandas as pd
import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

train_dir ='/content/chest_xray/train'
val_dir ='/content/chest_xray/val'
test_dir ='/content/chest_xray/test'
labels = ['NORMAL','PNEUMONIA']

No_train_NORMAL = len(os.listdir('/content/chest_xray/train/NORMAL'))
No_train_NORMAL

# No_train_NORMAL = len(os.listdir(os.path.join(train_dir,'NORMAL')))
No_train_NORMAL = len(os.listdir(train_dir +'/NORMAL'))
No_train_PNEUMONIA = len(os.listdir(os.path.join(train_dir,'PNEUMONIA')))
No_train_data = No_train_NORMAL + No_train_PNEUMONIA
No_train_data

# Sample Image
path = os.path.join(train_dir,'NORMAL')
file_name = os.listdir(path)[110]

img = cv2.imread(os.path.join(path, file_name))
plt.imshow(img)

img.shape

128*128*3

path = os.path.join(val_dir,'PNEUMONIA')
file_name = os.listdir(path)[5]

img = cv2.imread(os.path.join(path, file_name))

print(img.shape)
print(type(img))
plt.imshow(img)
print(cv2.resize(img,(128,128)).flatten().shape)

# data = []
# target = []

# for i in labels:
#     path=os.path.join(train_dir,i)
#     for img in os.listdir(path)[:1000]:
#         img_array= cv2.imread(os.path.join(path,img))
#         img_resized= cv2.resize(img_array,(128,128))
#         data.append(img_resized.flatten())
#         target.append(labels.index(i))

data = []
target = []

for i in labels:
    path=os.path.join(train_dir,i)
    for img in os.listdir(path):
        img_array= cv2.imread(os.path.join(path,img))
        if img_array is not None :
            img_resized= cv2.resize(img_array,(128,128))
            data.append(img_resized.flatten())
            target.append(labels.index(i))

data = np.array(data)
target = np.array(target)

data.shape, target.shape

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(data, target ,test_size=0.2,random_state=42, stratify = target)

from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(max_iter= 1000)
clf.fit(X_train, y_train)

print('Training Accuracy: ', clf.score(X_train, y_train))
print('Testing Accuracy: ', clf.score(X_test, y_test))

# Scaling
X_train = X_train / 255
X_test = X_test / 255

from sklearn.decomposition import PCA

pca = PCA(n_components=0.9)

X_train_ = pca.fit_transform(X_train)
X_test_ = pca.transform(X_test)

clf = LogisticRegression(max_iter= 1000)
clf.fit(X_train_, y_train)

print('No. of Components for 90% Variance Explained: ', pca.n_components_)
print('Training Accuracy: ', clf.score(X_train_, y_train))
print('Testing Accuracy: ', clf.score(X_test_, y_test))

pca.n_components_

